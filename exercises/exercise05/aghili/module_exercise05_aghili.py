# -*- coding: utf-8 -*-
"""module_exercise05_aghili.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lGeX14HRfFsswlh14NEDdIx3ahoQSmij
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

housing_df = pd.read_csv('affordable_housing.csv')

def status_and_max_ami(status, ami):

    # Select required columns
    filtered_housing_df = pd.DataFrame(
        housing_df)[['MAR_WARD',
            'STATUS_PUBLIC',
            'AFFORDABLE_UNITS_AT_0_30_AMI',
            'AFFORDABLE_UNITS_AT_31_50_AMI',
            'AFFORDABLE_UNITS_AT_51_60_AMI',
            'AFFORDABLE_UNITS_AT_61_80_AMI',
            'AFFORDABLE_UNITS_AT_81_AMI',
            'TOTAL_AFFORDABLE_UNITS']]

    # Check if status is valid
    if status not in [
        'Pipeline',
        'Under Construction',
        'Completed 2015 To Date']:

        print(
            "status:'Pipeline''Under Construction''Completed 2015 To Date'")
        return None

    # Filter by status
    filtered_housing_df = filtered_housing_df[
        filtered_housing_df['STATUS_PUBLIC'] == status]

    # Calculate AMI percentages based on the given range
    if ami in range(31):

        filtered_housing_df[
            'UP_TO_30_AMI_PERCENTAGE'] = filtered_housing_df[
            'AFFORDABLE_UNITS_AT_0_30_AMI'] / filtered_housing_df[
            'TOTAL_AFFORDABLE_UNITS']

        filtered_housing_df = filtered_housing_df.groupby(
            'MAR_WARD').sum(numeric_only=True).sort_values(
                'UP_TO_30_AMI_PERCENTAGE')

    elif ami in range(31, 51):

        filtered_housing_df[
            'UP_TO_50_AMI_PERCENTAGE'] = (
                filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_0_30_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_31_50_AMI']) / filtered_housing_df[
                    'TOTAL_AFFORDABLE_UNITS']

        filtered_housing_df = filtered_housing_df.groupby(
            'MAR_WARD').sum(numeric_only=True).sort_values(
                'UP_TO_50_AMI_PERCENTAGE')

    elif ami in range(51, 61):
        filtered_housing_df[
            'UP_TO_60_AMI_PERCENTAGE'] = (
                filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_0_30_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_31_50_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_51_60_AMI']) / filtered_housing_df[
                    'TOTAL_AFFORDABLE_UNITS']

        filtered_housing_df = filtered_housing_df.groupby(
            'MAR_WARD').sum(numeric_only=True).sort_values(
                'UP_TO_60_AMI_PERCENTAGE')
    elif ami in range(61, 81):

        filtered_housing_df[
            'UP_TO_80_AMI_PERCENTAGE'] = (
                filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_0_30_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_31_50_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_51_60_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_61_80_AMI']) / filtered_housing_df[
                    'TOTAL_AFFORDABLE_UNITS']

        filtered_housing_df = filtered_housing_df.groupby(
            'MAR_WARD').sum(numeric_only=True).sort_values(
                'UP_TO_80_AMI_PERCENTAGE')

    elif ami == 81:

        filtered_housing_df[
            'UP_TO_81_AMI_PERCENTAGE'] = (
                filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_0_30_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_31_50_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_51_60_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_61_80_AMI'] + filtered_housing_df[
                    'AFFORDABLE_UNITS_AT_81_AMI']) / filtered_housing_df[
                    'TOTAL_AFFORDABLE_UNITS']

        filtered_housing_df = filtered_housing_df.groupby(
            'MAR_WARD').sum(numeric_only=True).sort_values(
                'UP_TO_81_AMI_PERCENTAGE')

    # Print the guid for ami inputs
    else:
        print(
            "For ami, please use a valid range [0 - 81]")

    return filtered_housing_df

def bar_graph_by(status, ami):

    final_df = status_and_max_ami(status, ami)

    if status in ['Pipeline',
                  'Under Construction',
                  'Completed 2015 To Date']:

        if ami in range(31):
            bar_graph = sns.barplot(
                data=final_df, x='MAR_WARD',
                y='UP_TO_30_AMI_PERCENTAGE')
            plt.title(
                f'Affordable Units Percentage (AMI Up to 30%) ({status})')

        elif ami in range(31, 51):
            bar_graph = sns.barplot(
                data=final_df, x='MAR_WARD',
                y='UP_TO_50_AMI_PERCENTAGE')
            plt.title(
                f'Affordable Units Percentage (AMI Up to 50%) ({status})')

        elif ami in range(51, 61):
            bar_graph = sns.barplot(
                data=final_df, x='MAR_WARD',
                y='UP_TO_60_AMI_PERCENTAGE')
            plt.title(
                f'Affordable Units Percentage (AMI Up to 60%) ({status})')

        elif ami in range(61, 81):
            bar_graph = sns.barplot(
                data=final_df, x='MAR_WARD',
                y='UP_TO_80_AMI_PERCENTAGE')
            plt.title(
                f'Affordable Units Percentage (AMI Up to 80%) ({status})')

        elif ami == 81:
            bar_graph = sns.barplot(
                data=final_df, x='MAR_WARD',
                y='UP_TO_81_AMI_PERCENTAGE')
            plt.title(
                f'Affordable Units Percentage (AMI Up to 81%) ({status})')

        else:
            print(
                "ami:[0 - 81]")
            return None

    else:
        print(
            "status:'Pipeline''Under Construction''Completed 2015 To Date'")

        return None

    bar_graph.set(xlabel=None, ylabel=None)
    sns.despine()
    bar_graph.bar_label(
        bar_graph.containers[0], fmt="%.2f%%", label_type='edge')
    bar_graph.margins(y=0.1)
    plt.show()
    return bar_graph